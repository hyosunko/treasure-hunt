{"version":3,"sources":["Square.js","Header.js","App.js","index.js"],"names":["Square","colDataStr","this","props","data","colWidthArray","squareFontSize","Math","ceil","substring","length","console","log","squareStyle","display","height","width","border","alignItems","fontSize","justifyContent","react_default","a","createElement","style","className","id","onClick","handleChangeFunc","cellDisplayContentStatus","Component","Header","reset","e","preventDefault","_this","initFunc","resize","resizeBoardFunc","clickRemain","currentClickCounter","announce","winningPercent","winNo","currentRecord","loseNo","totalNo","toFixed","isNaN","styleSheet","document","styleSheets","aniDuration","keyframes","concat","insertRule","cssRules","announceStyle","color","animationName","animationTimingFunction","animationDuration","animationIterationCount","recordStyle","currentCellId","onSubmit","type","min","max","required","value","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getScreenWidth","de","body","parentNode","db","window","opera","clientWidth","compatMode","handleChange","cellClickedId","target","_this$state","state","clickCounter","cellStatus","cellDisplayContent","cellId","record","i","fill","clickedCellArray","x","getElementById","backgroundColor","push","setState","currentState","defaultState","updateBoard","_this$state2","boardWidth","boardHeight","Array","treasurePostion","floor","random","noOfBomb","bombPosition","resizeBoard","_this$state3","screenWidth","minBoxSize","maxBoxSize","parseInt","boxSize","_this$state4","_this2","join","columnStyle","margin","gridTemplateColumns","boardCell","map","v","src_Square","currentSpace","src_Header","ReactDOM","render","src_App_0"],"mappings":"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","file":"static/js/main.ff8b5f00.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Square extends Component{\r\n\r\n\trender(){\r\n\r\n    var colDataStr = this.props.data.colWidthArray[0]\r\n\tvar squareFontSizeStr = this.props.data.squareFontSize\r\n\tvar squareFontSize = Math.ceil((colDataStr.substring(0,colDataStr.length-2)/100)*2)\r\n\tvar squareFontSize = squareFontSize+'em'\r\n\tconsole.log(\"this.props: \", this.props)\r\n\tconsole.log(\"font size: \", squareFontSize)\r\n\r\n    console.log(\"colDataStr in Square\", colDataStr)\r\n\r\n    // setup inline style data\r\n    let squareStyle = {\r\n\r\n    \tdisplay: 'grid',\r\n  \t\theight: colDataStr,\r\n  \t\twidth: colDataStr,\r\n\t    border: '1px solid black',\r\n\t\talignItems: 'center',\r\n\t\tfontSize: squareFontSize,\r\n\t    justifyContent: 'center',\r\n    }\r\n\r\n\r\n\t\treturn (\r\n\t\t\t<div style={squareStyle} className=\"square-container\" id={this.props.id} onClick={this.props.handleChangeFunc} >{this.props.cellDisplayContentStatus}\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default Square;","import React, { Component } from 'react';\r\n\r\n\r\nclass Header extends Component{\r\n\r\n\t// reset board contents\r\n\treset=(e)=>{\r\n\t\t// prevent page refresh\r\n\t\te.preventDefault()\r\n\t\t// call board initialize function\r\n\t\tthis.props.initFunc()\r\n\t}\r\n\r\n\t// resize board contents\r\n\tresize= e=>{\r\n\t\te.preventDefault()\r\n\t\t// call board resize function\r\n\t\tthis.props.resizeBoardFunc()\r\n\t}\r\n\r\n\trender(){\r\n\r\n    \r\n\t\tlet clickRemain = this.props.currentClickCounter\r\n\t\tlet announce =\"Remain Click Counts : \" + clickRemain\r\n\t\tlet cellDisplayContentStatus = this.props.cellDisplayContentStatus\r\n\r\n\t\t//calculate winning percentage\r\n\t\tlet winningPercent = 0\r\n\t\tlet winNo=this.props.currentRecord[0]\r\n\t\tlet loseNo=this.props.currentRecord[1]\r\n\t\tlet totalNo= winNo+loseNo;\r\n\t\twinningPercent = (winNo/totalNo*100).toFixed(0)\r\n\t\t// in case of no win/lose record, set winning percent to 0\r\n\t\tif(isNaN(winningPercent)){winningPercent=0}\r\n\r\n\t\tconsole.log(\"clickRemain: \",clickRemain)\r\n\t\t// click message inline color css\r\n\t    let styleSheet = document.styleSheets[0];\r\n\t    let animationName = `bliner`;\r\n\t    let aniDuration= '7s';\r\n\t    let keyframes =\r\n\t    `@-webkit-keyframes ${animationName} {\r\n\t    \t\t0%{color: crimson;}\r\n\t\t\t\t7%{color: transparent;}\r\n\t\t\t\t14%{color: lime;}\r\n\t\t\t\t21%{color: transparent;}\r\n\t\t\t\t28%{color: deeppink;}\r\n\t\t\t\t35%{color: transparent;}\r\n\t\t\t\t42%{color: steelblue;}\r\n\t\t\t\t49%{color: transparent;}\r\n\t\t\t\t56%{color: fuchsia;}\r\n\t\t\t\t63%{color: transparent;}\r\n\t\t\t\t70%{color: springgreen;}\r\n\t\t\t\t77%{color: transparent;}\r\n\t\t\t\t84%{color: goldenrod;}\r\n\t\t\t\t91%{color: transparent;}\r\n\t\t\t\t100%{color: crimson;}\r\n\t    }`;\r\n\t\tstyleSheet.insertRule(keyframes, styleSheet.cssRules.length);\r\n\r\n\t\t//select animation for click remains > 2 then black color\t\t\r\n\t\tif(clickRemain>2){\r\n\t\t\tvar announceStyle={color: 'black'};\r\n\t\t//click remain =2, blinking color anim.\r\n\t\t} else if(clickRemain>1){\r\n\t\t\tvar announceStyle={\r\n\t\t\t    animationName: animationName,\r\n\t\t\t    animationTimingFunction: 'ease-in-out',\r\n\t\t\t    animationDuration: aniDuration,\r\n\t\t\t    animationIterationCount: 'infinite',\r\n\t\t\t};\r\n\t\t//click remain =1, faster blinking \r\n\t\t} else {\r\n\t\t\taniDuration= '3s'\r\n\t\t\tvar announceStyle={\r\n\t\t\t    animationName: animationName,\r\n\t\t\t    animationTimingFunction: 'ease-in-out',\r\n\t\t\t    animationDuration: aniDuration,\r\n\t\t\t    animationIterationCount: 'infinite',\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\t//change colors by winning percentages\r\n\t\tvar recordStyle={color: 'midnightblue'};\r\n\t\tif(winningPercent>50){\r\n\t\t\trecordStyle={color: 'limegreen'};\r\n\t\t} else if(winningPercent<50&&(winNo!==0||loseNo!==0)){\r\n\t\t\trecordStyle={color: 'coral'};\r\n\t\t}\r\n\r\n\t\t//game message set up\r\n\t\tif(this.props.currentCellId !== 999){\r\n\t\t\tif(cellDisplayContentStatus[this.props.currentCellId] === \"💎\"){\r\n\t\t\t\tannounce = \"You won!!! Please reset the game to start again\";\r\n\t\t\t\t// game winning message inline color css\r\n\t\t\t\tannounceStyle={color: 'mediumspringgreen'};\r\n\t\t\t} else if(this.props.currentClickCounter === 0 || cellDisplayContentStatus[this.props.currentCellId]===\"💣\"){\r\n\t\t\t\tannounce = \"You lost!!! Please reset the game to start gain\";\r\n\t\t\t\t// game losing message inline color css\r\n\t\t\t\tannounceStyle={color: 'red'};\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//Submit button size setup\r\n\t    let inputSubmitStyle ={\r\n\t      width:'auto'\r\n\t    }\r\n\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Treasure Hunt</h1>\r\n\r\n\t\t        {/*board resize form*/}\r\n\t\t        <div>\r\n\t\t\t    \t<form onSubmit={this.resize}>\r\n\t\t\t        \t<h3>Do you want to resize board?<br/> \r\n\t\t\t            Width: <input type=\"number\" id=\"width\" min=\"2\" max=\"10\" required/>\r\n\t\t\t            Height: <input type=\"number\" id=\"height\" min=\"1\" max=\"10\" required/>\r\n\t\t\t            <input className=\"space\" style={inputSubmitStyle} type=\"submit\" value=\"Submit\" />\r\n\t\t\t            </h3>\r\n\t\t\t        </form>\r\n\t\t        </div>\r\n\r\n\t\t        {/*click counter message & win or lose message*/}\r\n\t\t\t\t<h2 style={announceStyle}>{announce} </h2>\r\n\r\n\t\t        {/*no of games, win, and loses, and percentage*/}\r\n\t\t\t\t<h3 style={recordStyle}>No of Games: {totalNo}, Won :{winNo} Lost : {loseNo} <br/>\r\n\t\t\t\t Winning Percent : {winningPercent}%</h3>\r\n\t\t        {/*game reset button*/}\r\n\t\t\t\t<form onSubmit={this.reset}>\r\n\t\t\t\t\t<button className=\"button1\" type=\"submit\">Reset</button>\r\n\t\t\t\t</form>\r\n\t\t\t\t<p> </p>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Square from './Square';\r\nimport Header from './Header'\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state ={\r\n      boardWidth: 3,\r\n      boardHeight: 3,\r\n      cellId: 999,\r\n      clickCounter: 5,\r\n      colWidthArray : [],\r\n      squareFontSize : '3em',\r\n      cellDisplayContent: [],\r\n      cellStatus: [],\r\n      record:[0,0],\r\n      clickedCellArray:[],\r\n      screenWidth : 700,\r\n      minBoxSize : 60,\r\n      maxBoxSize : 150\r\n    }\r\n\r\n  }\r\n\r\n  //function to get screen width\r\n\r\n  // console.log(\"inside func\", getScreenWidth())\r\n\r\n  getScreenWidth=()=>{  \r\n     var de = document.body.parentNode;\r\n     var db = document.body;\r\n     if(window.opera) return db.clientWidth;\r\n     if (document.compatMode=='CSS1Compat') return de.clientWidth;\r\n     else return db.clientWidth;\r\n  }\r\n\r\n\r\n  componentDidMount(){\r\n    let {boardWidth,boardHeight, clickCounter, cellStatus, cellDisplayContent,colWidthArray, screenWidth, minBoxSize, maxBoxSize} = this.state;\r\n    //initializes board data\r\n    //fills cell status data with 0\r\n    cellStatus = Array(boardWidth*boardHeight).fill(0);\r\n    // set up screen width on browser\r\n    \r\n    screenWidth= this.getScreenWidth()\r\n   \r\n\r\n   let boxSize = Math.ceil(screenWidth/(boardWidth+2))\r\n   if(boxSize > maxBoxSize){\r\n    boxSize = maxBoxSize\r\n   } else if (boxSize < minBoxSize){\r\n    boxSize = minBoxSize\r\n   }\r\n   console.log(\"boxSize\", boxSize)\r\n    //fills cell display data with \"?\"\r\n    cellDisplayContent = Array(boardWidth*boardHeight).fill(\"❓\");\r\n    //fills col size data by board width\r\n    colWidthArray = Array(boardWidth).fill(boxSize+\"px\");\r\n\r\n    //intializes treasure, bomb position & game counter\r\n    //selects random treasure position between 0 to length of board\r\n    let treasurePostion = Math.floor(Math.random() * cellStatus.length)\r\n\r\n    //selects no of bomb: 10% of board size\r\n    let noOfBomb=Math.ceil(cellStatus.length/10)\r\n    //selects no of click counter: half of board size\r\n    clickCounter = Math.ceil(cellStatus.length/2)\r\n    //changes treasure data: 1 by selected position\r\n    cellStatus[treasurePostion] = 1\r\n    //selects bomb positions by looping\r\n    while(noOfBomb>0){\r\n      let bombPosition =Math.floor(Math.random() * cellStatus.length)\r\n      //selects bomb position if it is not same as treasure position\r\n      if(bombPosition !== treasurePostion ){\r\n        cellStatus[bombPosition] = 2\r\n        noOfBomb--\r\n      }\r\n    }\r\n\r\n\r\n    this.setState({colWidthArray:colWidthArray, cellStatus:cellStatus, cellDisplayContent:cellDisplayContent, clickCounter:clickCounter, screenWidth:screenWidth})\r\n\r\n    console.log(\"noOfBomb: \",noOfBomb)\r\n    console.log(\"colWidthArray: \", colWidthArray)\r\n    console.log(\"cellStatus: \", cellStatus)\r\n    console.log(\"screenWidth: after \", screenWidth)\r\n\r\n  }\r\n\r\n\r\n  //cell clicked event hanlding function\r\n  handleChange= e =>{\r\n    let cellClickedId = e.target.id;\r\n    let {clickCounter, cellStatus, cellDisplayContent, cellId, record} = this.state;\r\n\r\n    //if clicked treasure=1, bomb=2 or game counter is one remain and cell status is not been clicked=9\r\n    if((cellStatus[cellClickedId]=== 1 || clickCounter === 1 || cellStatus[cellClickedId]=== 2)&&cellStatus[cellClickedId]!==9){\r\n        for(let i=0;i<cellStatus.length;i++){\r\n          if(cellStatus[i]===1){\r\n            cellDisplayContent[i]=\"💎\"\r\n          } else if(cellStatus[i]===2){\r\n            cellDisplayContent[i]=\"💣\"\r\n          }\r\n        }\r\n\r\n        //increases win or lose records\r\n        if(cellStatus[cellClickedId]===1){\r\n            record[0]++\r\n        } else{\r\n            record[1]++\r\n        }\r\n        console.log(\"cellClickedId: \", cellClickedId);\r\n        console.log(\"Cell Status cellClickedId: \", cellStatus[cellClickedId]);\r\n        //resets cell status, click counter\r\n        cellStatus.fill(9)\r\n        cellId = cellClickedId\r\n        clickCounter=0\r\n    } else{\r\n        //if cell hasn't been clicked and is empty\r\n        if(cellStatus[cellClickedId]!==9){\r\n          if(cellStatus[cellClickedId]===0){\r\n            cellDisplayContent[cellClickedId]=\"🌴\"\r\n          }\r\n        clickCounter --\r\n        cellId = cellClickedId\r\n        cellStatus[cellClickedId] = 9\r\n     }\r\n    }\r\n\r\n    //changes of cell color clicked\r\n    var {clickedCellArray}=this.state;\r\n    var x = document.getElementById(cellId);\r\n    x.style.backgroundColor = 'aliceblue';\r\n    clickedCellArray.push(x);\r\n    //collects clicked cell objects to array\r\n    this.setState({clickedCellArray:clickedCellArray})\r\n    console.log(\"clickedCellArray: \",clickedCellArray);\r\n\r\n    this.setState({currentState:this.state, clickCounter:clickCounter, cellId:cellId, record:record})\r\n\r\n    console.log(\"cellClickedId: \", cellClickedId)\r\n    console.log(\"click counter: \", clickCounter)\r\n    console.log(\"cellStatus: \", cellStatus)\r\n    console.log(\"cellDisplayContent: \", cellDisplayContent)\r\n    console.log(\"record: \", record)\r\n    console.log(\"defaultState: \", this.defaultState)\r\n  }\r\n\r\n  // resets board data\r\n  updateBoard=()=>{\r\n\r\n    let {boardWidth, boardHeight, clickCounter, cellStatus, cellDisplayContent, record, clickedCellArray} = this.state;\r\n    //initializes board data\r\n    cellStatus = Array(boardWidth*boardHeight).fill(0);\r\n    cellDisplayContent = Array(boardWidth*boardHeight).fill(\"❓\");\r\n\r\n    //intializes treasure, bomb position & game counter\r\n    let treasurePostion = Math.floor(Math.random() * cellStatus.length)\r\n    let noOfBomb=Math.ceil(cellStatus.length/10)\r\n    clickCounter = Math.ceil(cellStatus.length/2)\r\n    cellStatus[treasurePostion] = 1\r\n    while(noOfBomb>0){\r\n      let bombPosition =Math.floor(Math.random() * cellStatus.length)\r\n      if(bombPosition !== treasurePostion ){\r\n        cellStatus[bombPosition] = 2\r\n        noOfBomb--\r\n      }\r\n    }\r\n\r\n    // resets cell background color of all clicked cells\r\n    for(let i=0;i<clickedCellArray.length;i++){\r\n      clickedCellArray[i].style.backgroundColor = 'beige'\r\n    }\r\n    // empty clicked cells info\r\n    clickedCellArray=[]\r\n\r\n    console.log(\"clickedCellArray after: \",clickedCellArray)\r\n    console.log(\"reset noOfBomb: \",noOfBomb)\r\n    console.log(\"reset cellStatus: \", cellStatus)\r\n\r\n    this.setState({cellStatus:cellStatus, cellDisplayContent:cellDisplayContent, clickCounter:clickCounter, boardWidth:boardWidth, boardHeight:boardHeight, record:record, clickedCellArray:clickedCellArray})\r\n  }\r\n\r\n  // resets board data\r\n  resizeBoard=()=>{\r\n\r\n    let {boardWidth,boardHeight, clickCounter, cellStatus, cellDisplayContent,colWidthArray, clickedCellArray, screenWidth, minBoxSize, maxBoxSize} = this.state;\r\n    boardWidth=parseInt(document.getElementById(\"width\").value);\r\n    boardHeight=parseInt(document.getElementById(\"height\").value);\r\n    //initializes board data\r\n    //fills cell status data with 0\r\n    cellStatus = Array(boardWidth*boardHeight).fill(0);\r\n    //fills cell display data with \"?\"\r\n\r\n    screenWidth= this.getScreenWidth()\r\n   \r\n   let boxSize = Math.ceil(screenWidth/(boardWidth+2))\r\n   if(boxSize > maxBoxSize){\r\n    boxSize = maxBoxSize\r\n   } else if (boxSize < minBoxSize){\r\n    boxSize = minBoxSize\r\n   }\r\n\r\n    cellDisplayContent = Array(boardWidth*boardHeight).fill(\"❓\");\r\n    //fills col size data by board width\r\n    colWidthArray = Array(boardWidth).fill(boxSize+\"px\");\r\n\r\n    //intializes treasure, bomb position & game counter\r\n    //selects random treasure position between 0 to length of board\r\n    let treasurePostion = Math.floor(Math.random() * cellStatus.length)\r\n\r\n    //selects no of bomb: 10% of board size\r\n    let noOfBomb=Math.ceil(cellStatus.length/10)\r\n    //selects no of click counter: half of board size\r\n    clickCounter = Math.ceil(cellStatus.length/2)\r\n    //changes treasure data: 1 by selected position\r\n    cellStatus[treasurePostion] = 1\r\n    //selects bomb positions by looping\r\n    while(noOfBomb>0){\r\n      let bombPosition =Math.floor(Math.random() * cellStatus.length)\r\n      //selects bomb position if it is not same as treasure position\r\n      if(bombPosition !== treasurePostion ){\r\n        cellStatus[bombPosition] = 2\r\n        noOfBomb--\r\n      }\r\n    }\r\n\r\n    for(let i=0;i<clickedCellArray.length;i++){\r\n      clickedCellArray[i].style.backgroundColor = 'beige'\r\n    }\r\n    // empty clicked cells info\r\n    clickedCellArray=[]\r\n\r\n\r\n    console.log(\"noOfBomb: \",noOfBomb)\r\n    console.log(\"colWidthArray: \", colWidthArray)\r\n    console.log(\"cellStatus: \", cellStatus)\r\n\r\n    this.setState({colWidthArray:colWidthArray, cellStatus:cellStatus, cellDisplayContent:cellDisplayContent, clickCounter:clickCounter, boardWidth:boardWidth, boardHeight:boardHeight, clickedCellArray:clickedCellArray})\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    // create column grid data\r\n    var colDataStr = this.state.colWidthArray.join(\" \")\r\n    console.log(\"colWidthArray in App\", this.state.colWidthArray)\r\n\r\n    // setup inline style data\r\n    let columnStyle = {\r\n      margin: '0',\r\n      display: 'grid',\r\n      gridTemplateColumns: colDataStr,\r\n      justifyContent: 'center',\r\n    }\r\n\r\n    // create board data\r\n    let boardCell = this.state.cellStatus.map((v,i)=>{\r\n      return(\r\n        <Square id={i} currentSpace={this.state.cellStatus[i]} cellDisplayContentStatus={this.state.cellDisplayContent[i]} handleChangeFunc={this.handleChange}  colWidthArray={this.state.colWidthArray} data={this.state}/>\r\n        )\r\n    })\r\n      return (\r\n        <div className=\"App\">\r\n          {/*Title & counter remain data*/}\r\n          <Header currentClickCounter={this.state.clickCounter} currentCellId={this.state.cellId} cellDisplayContentStatus={this.state.cellDisplayContent} initFunc={this.updateBoard} currentRecord={this.state.record} boardWidth={this.state.boardWidth} boardHeight={this.state.boardHeight} resizeBoardFunc={this.resizeBoard} />\r\n\r\n          {/*board*/}\r\n          <div style={columnStyle} className=\"board-list\">\r\n            {boardCell}\r\n          </div>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n"],"sourceRoot":""}